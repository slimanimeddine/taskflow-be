name: Authentication
description: ''
endpoints:
  -
    httpMethods:
      - POST
    uri: api/v1/sign-up
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign Up'
      description: 'Register a new user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: 'The name of the user.'
        required: true
        example: 'john doe'
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user. Must be unique. Must be a valid email address.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'A secure password for the user. Must be at least 8 characters long. Must be at least 8 characters.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      name: 'john doe'
      email: johndoe@gmail.com
      password: password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "User created successfully.",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/sign-in
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign In'
      description: 'Sign in a user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user attempting to sign in. Must be a valid email address.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The password associated with the user account. Must be at least 8 characters.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
      password: password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Authenticated.",
               "data": {
                   "token": "{YOUR_AUTH_KEY}",
                   "id": "01js7h2q08v42j8wfzng4emkvf"
               },
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Invalid credentials.",
               "status": 401
          }
        headers: []
        description: 'Invalid credentials'
        custom: []
      -
        status: 404
        content: |-
          {
               "message": "User not found with the provided credentials.",
               "status": 401
          }
        headers: []
        description: 'User not found'
        custom: []
      -
        status: 429
        content: |-
          {
               "message": "Too many login attempts.",
               "status": 429
          }
        headers: []
        description: 'Rate limit exceeded'
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/sign-out
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Sign Out'
      description: 'Signs out a user and deletes the auth token'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Signed out successfully.",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/change-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Change Password'
      description: 'Changes the password of the authenticated user'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      current_password:
        name: current_password
        description: 'The current password of the user.'
        required: true
        example: password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      new_password:
        name: new_password
        description: 'The new password of the user. Must be at least 8 characters.'
        required: true
        example: new_password
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      current_password: password
      new_password: new_password
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Password updated successfully",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
               "message": "Invalid current password",
               "status": 400
          }
        headers: []
        description: 'Invalid current password'
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - GET
    uri: 'api/v1/email/verify/{id}/{hash}'
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Verify Email'
      description: 'Verifies the email of the authenticated user'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'The ID of the user.'
        required: false
        example: 01js7h2q08v42j8wfzng4emkvf
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      hash:
        name: hash
        description: 'The hash of the email.'
        required: false
        example: 1234567890abcdef1234567890abcdef12345678
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanUrlParameters:
      id: 01js7h2q08v42j8wfzng4emkvf
      hash: 1234567890abcdef1234567890abcdef12345678
    queryParameters:
      expires:
        name: expires
        description: 'The expiration time of the link in seconds.'
        required: false
        example: '1746693113'
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
      signature:
        name: signature
        description: 'The signature of the link.'
        required: false
        example: 1234567890abcdef
        type: string
        enumValues: []
        exampleWasSpecified: true
        nullable: false
        custom: []
    cleanQueryParameters:
      expires: '1746693113'
      signature: 1234567890abcdef
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Email verified successfully",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
               "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "Invalid url",
               "status": 403
          }
        headers: []
        description: 'Invalid url'
        custom: []
      -
        status: 403
        content: |-
          {
               "message": "Email already verified",
               "status": 403
          }
        headers: []
        description: 'Email already verified'
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/email/verification-notification
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Resend Email Verification'
      description: 'Resends the email verification notification to the authenticated user'
      authenticated: true
      custom: []
    headers:
      Authorization: 'Bearer {YOUR_AUTH_KEY}'
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Verification link sent!",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 401
        content: |-
          {
              "message": "Unauthenticated"
          }
        headers: []
        description: Unauthenticated
        custom: []
    responseFields: []
    auth:
      - headers
      - Authorization
      - 'Bearer 6g43cv8PD1aE5beadkZfhV6'
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/forgot-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Send Password Reset Link'
      description: "Sends a password reset link to the user's email"
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      email:
        name: email
        description: 'The email address of the user requesting the password reset link. Must be a valid email address. The <code>email</code> of an existing record in the users table.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      email: johndoe@gmail.com
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Reset link sent successfully",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
              "message": "Failed to send reset link"
              "status": 400
          }
        headers: []
        description: Failure
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/reset-password
    metadata:
      groupName: Authentication
      groupDescription: ''
      subgroup: ''
      subgroupDescription: ''
      title: 'Reset Password'
      description: 'Resets the password of the user'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      token:
        name: token
        description: 'The password reset token.'
        required: true
        example: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      email:
        name: email
        description: 'The email address of the user. Must be a valid email address. The <code>email</code> of an existing record in the users table.'
        required: true
        example: johndoe@gmail.com
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
      password:
        name: password
        description: 'The new password for the user. Must be at least 8 characters.'
        required: true
        example: newpassword123
        type: string
        enumValues: []
        exampleWasSpecified: false
        nullable: false
        custom: []
    cleanBodyParameters:
      token: 1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
      email: johndoe@gmail.com
      password: newpassword123
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "message": "Password reset successfully",
               "status": 200
          }
        headers: []
        description: Success
        custom: []
      -
        status: 400
        content: |-
          {
              "message": "Failed to reset password"
              "status": 400
          }
        headers: []
        description: Failure
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
